x
y <- x-3
y
z <- c(1.1,9,3.14)
?w
?c
z
c(z,55)
c(z,555,z)
z*2+100
my_squrt <- sqrt(z-1)
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
getwd()
ls()
x<-9
ls()
dir()
?list.files
args(list.files())
args(list.files)
old.dir <- wd()
old.dir <- getwd()
args(dir.create)
args("testdir")
dir.create("testdir")
setwd("testdir")
file.create("mytest.r")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R"
)
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
f
file.path("mytest3.R", folder1,folder2)
?file.path
file.path("mytest3.R", fsep = .Platform$file.sep)
file.path("folder1","folder2")
?dir.create
dir.create("testdir")
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?":"
seq(1,20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10,
| length=30)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep( 0, tiles=40 )
rep( 0, times=40 )
rep( c( 0,1,2 ), times=10 )
rep(c(0, 1, 2), each = 10)
1:20
pi:10
15:1
?":"
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq(5,10, length=30)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
q()
library(swirl)
swirl()
buy
stop
df
library(swirl)
swirl()
View(flags)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6)
)
lapply(flags,unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags, unique)
dummy_variable <- function(elem,function{lapply(unique_vals, function(elem) elem[2])}
dummy_variable <- function(elem,tfunction{lapply(unique_vals, tfunction(elem) elem[2])}
dummy_variable <- function(elem,function){lapply(unique_vals, function(elem) elem[2])}
dummy_variable <- function(elem){lapply(unique_vals, function(elem) elem[2])}
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
tapply(iris,iris$Sepal.Length,iris$species,mean)
sapply(iris,mean)
tapply(iris,iris$Sepal.Length,iris$Species,mean)
lapply(iris,mean)
tapply(iris,iris$Sepal.Length,iris$Species,summary)
tapply(iris,iris$Sepal.Length,iris$species,summary)
tapply(iris,iris$sepal.Length,iris$species,summary)
lapply(iris,mean)
vapply(iris,mean,chara[1])
vapply(iris,mean,character[1])
sapply(iris, class)
levels(iris$Species)
mean(iris[iris$Species == "virginica",]$Sepal.Length)
tapply(Sepal.Length, Species, mean)
tapply(Sepal.Length, species, mean)
tapply(iris$Sepal.Length, iris$species, mean)
iris.s <- subset(iris, select= Species)
iris.x <- subset(iris, select= -Species)
iris.s
iris.x
sapply(split(iris.x, iris.s), function(x) apply(x, 2, mean))
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
colMeans(iris)
rowMeans(iris[, 1:4])
apply(iris, 2, mean)
apply(iris, 2, mean)
data("mtcars")
tapply(mtcars$mpg, mtcars$cyl, mean)
View(mtcars)
mean(mtcars[mtcars$cyl == "8",]$hp) - mean(mtcars[mtcars$cyl == "4",]$hp)
data(iris)
mean(iris[spieces=="virginica"]$Sepal.Length)
mean(iris[spieces="virginica"]$Sepal.Length)
mean(iris[iris$spieces="virginica"]$Sepal.Length)
mean(iris[iris$spieces=="virginica"]$Sepal.Length)
apply(iris[, 1:4], 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
getwd
()
apply(iris[, 1:4], 2, mean)
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
library("swirl")
swirl()
bye()
swirl()
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
plot(hc)
as.dendrogram(hc)
plot(as.dendrogram(hc))
abline()
abline(h=1.5,col="blue")
abline(h=0.4,col="red")
5
5
abline(h=0.08,col="green")
12
abline(h=0.05,col="green")
dist(dFsm)
plot(hc)
hc
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist(x,y,cx,cy)
lapply(distTmp,2,which.min)
apply(distTmp,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newcx,newCy,col=cols1,pch=8,cex=2,lwd=2)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
dist(x,y,newCx,newCy)
mdist(x,y,newCx,newCy)
apply(distTmp2,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame,centers = 3)
kmObj$iter
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centerscol=c("black","red","green"),pch=3,cex=3,lwd=3)
points(kmObj$centerscol,c("black","red","green"),pch=3,cex=3,lwd=3)
points(kmObj$centers,c("black","red","green"),pch=3,cex=3,lwd=3)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.r")
myedit("addPatt.R")
source("addPatt.R",local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% t(matv)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat)
)
svd1$v[,1]
svd1$d[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2[,1:2]
svd2$v[,1:2]
svd2
svd2$d
dim(faceData)
a1 <- svd1$u[,1] %*% t(svd1$v[,1]) * svd1$d[1]
myImage(a1)
a2 <- svd1$u[,1:2] %*%  diag(svd1$d[1:2])  %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*%  diag(svd1$d[1:5])  %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*%  diag(svd1$d[1:10])  %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
table(ssd$subject))
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd,subject==1)
sub1
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(c(1:6))
mdist(sub1[,1:3])
mdist <- dist(sub1[,1:3])
hcclustering <- hcclust(mdist)
hcclustering <- hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hcclustering <- hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,c(562,563)]))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering,lab.com=unclass(sub1$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity)
)
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(562,563)],kmeans(6))
kClust <- kmeans(sub1[,-c(562,563)],centers=6)
table(kClust$cluster,sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart=100)
table(kCluster$cluster,sub1$activity)
table(cKluster$cluster,sub1$activity)
table(kClust$cluster,sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot( kClust$centers[laying,1:12],pch=19,ylab = "Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown, 1:12],pch=19,ylab="Walkdown Cluster")
setwd("~/Coursera/Reproductible research/RepData_PeerAssessment1")
#download the data
strFName <- "Activity.zip"
if (!file.exists(strFName)){
strFile <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(strFile,strFName)
unzip(strFName)
}
#download the data
strFName <- "Activity.zip"
if (!file.exists(strFName)){
strFile <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(strFile,strFName)
unzip(strFName)
}
dsSource = read.csv(strFName)
dim(dsSource)
View(dsSource)
#download the data
strFName <- "Activity.zip"
if (!file.exists(strFName)){
strFile <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(strFile,strFName)
unzip(strFName)
}
strFName <- "activity.csv"
dsSource = read.csv(strFName)
dim(dsSource)
dsStepsPerDay <- aggregate(steps~date,data = dsSource,sum)
mean(dsStepsPerDay$steps)
dsStepsPerDay <- aggregate(steps~date,data = dsSource,sum)
meanSteps <- round(mean(dsStepsPerDay$steps), digits=0)
dsSource$interval_revised <- sprintf("%04d", dsSource$interval)
View(dsSource)
dsSource$interval_revised <- sprintf("%04d", dsSource$interval)
dsStepsPerInterval <- aggregate(steps~interval_revised, data=dsSource,mean)
View(dsStepsPerInterval)
hist(dsStepsPerInterval$steps,xlab = dsStepsPerInterval$interval_revised)
hist(dsStepsPerInterval$steps,xlab = as.time(dsStepsPerInterval$interval_revised))
hist(dsStepsPerInterval$steps,xlab = hm(dsStepsPerInterval$interval_revised))
library(lubridate)
hist(dsStepsPerInterval$steps,xlab = hm(dsStepsPerInterval$interval_revised))
head(gsub("(\\d{2})(?=\\d{2})",":",dsSource$interval_revised))
stri_sub(dsSource$interval_revised,1L,2L)
int <- dsSource$interval_revised
substr(int,1,2)
substr(int,3,4)
paste(substr(int,1,2),substr(int,3,3), sep = ":")
paste(substr(int,1,2),substr(int,3,4), sep = ":")
dsSource$interval_revised <- sprintf("%04d", dsSource$interval)
dsSource$interval_revised <- paste(  substr(dsSource$interval_revised,1,2),
substr(dsSource$interval_revised,3,4),
sep = ":")
dsStepsPerInterval <- aggregate(steps~interval_revised, data=dsSource,mean)
hist(dsStepsPerInterval$steps,xlab = hm(dsStepsPerInterval$interval_revised))
dsSource$interval_revised <- sprintf("%04d", dsSource$interval)
dsSource$interval_revised <- paste(  substr(dsSource$interval_revised,1,2),
substr(dsSource$interval_revised,3,4),
sep = ":")
dsSource$interval_revised <- hm(dsSource$interval_revised)
dsStepsPerInterval <- aggregate(steps~interval_revised, data=dsSource,mean)
barplot(dsStepsPerInterval$steps)
barplot(dsStepsPerInterval$steps)
library(ggplot2)
g <- gglot(dsStepsPerInterval)
library(ggplot2)
g <- ggplot(dsStepsPerInterval)
g
g <- ggplot(dsStepsPerInterval, aes(x=interval_revised, y=steps))
g
g <- ggplot(dsStepsPerInterval, aes(x=interval_revised, y=x))
g
g <- ggplot(dsStepsPerInterval)+geom_line()
g
g <- ggplot(steps~interval_revised, data = dsStepsPerDay)+geom_line()
dsSource$interval_revised <- as.vector(hm(dsSource$interval_revised))
dsSource$interval_revised <- sprintf("%04d", dsSource$interval)
dsSource$interval_revised <- paste(  substr(dsSource$interval_revised,1,2),
substr(dsSource$interval_revised,3,4),
sep = ":")
dsSource$interval_revised <- as.factor(hm(dsSource$interval_revised))
g <- ggplot(dsStepsPerDay, aes(x=interval_revised, y=steps))+geom_line()
g
dsSource$interval_revised <- dsSource$interval/60
head(dsSource$interval_revized)
dsSource$interval_revised <- sprintf("%04d", dsSource$interval)
dsSource$interval_revised <- paste(  substr(dsSource$interval_revised,1,2),
substr(dsSource$interval_revised,3,4),
sep = ":")
dsSource$interval_revised <- as.factor(dsSource$interval_revised)
dsSource$interval_revised <- sprintf("%04d", dsSource$interval)
dsSource$interval_revised <- paste(  substr(dsSource$interval_revised,1,2),
substr(dsSource$interval_revised,3,4),
sep = ":")
dsSource$interval_revised <- as.factor(dsSource$interval_revised)
dsStepsPerInterval <- aggregate(steps~interval_revised, data=dsSource,mean)
g <- ggplot(dsStepsPerDay, aes(x=interval_revised, y=steps))+geom_line()
g
dsSource$interval_revised <- sprintf("%04d", dsSource$interval)
dsSource$interval_revised <- paste(  substr(dsSource$interval_revised,1,2),
substr(dsSource$interval_revised,3,4),
sep = ":")
dsSource$interval_revised <- as.factor(dsSource$interval_revised)
dsStepsPerInterval <- aggregate(steps~interval_revized, data=dsSource,mean)
dsSource$interval_revised <- sprintf("%04d", dsSource$interval)
dsSource$interval_revised <- paste(  substr(dsSource$interval_revised,1,2),
substr(dsSource$interval_revised,3,4),
sep = ":")
dsSource$interval_revised <- as.factor(dsSource$interval_revised)
dsStepsPerInterval <- aggregate(steps~interval_revised, data=dsSource,mean)
g <- ggplot(dsStepsPerDay, aes(x=date, y=steps))+geom_line()
g
dsSource$interval_revised <- sprintf("%04d", dsSource$interval)
dsSource$interval_revised <- paste(  substr(dsSource$interval_revised,1,2),
substr(dsSource$interval_revised,3,4),
sep = ":")
dsSource$interval_revised <- as.factor(dsSource$interval_revised)
dsStepsPerInterval <- aggregate(steps~interval_revised, data=dsSource,mean)
g <- ggplot(dsStepsPerDay, aes(x=interval_revised, y=steps))+geom_line()
g
dsSource$interval_revised <- sprintf("%04d", dsSource$interval)
dsSource$interval_revised <- paste(  substr(dsSource$interval_revised,1,2),
substr(dsSource$interval_revised,3,4),
sep = ":")
dsSource$interval_revised <- as.factor(dsSource$interval_revised)
dsStepsPerInterval <- aggregate(steps~interval_revised, data=dsSource,mean)
g <- ggplot(dsStepsPerInterval, aes(x=interval_revised, y=steps))+geom_line()
g
head(dsStepsPerInterval)
g <- ggplot(dsStepsPerInterval, aes(x=interval_revised, y=steps))+geom_line(group=1)
g
install.packages(scales)
install.packages("scales")
save.image("~/Coursera/Reproductible research/RepData_PeerAssessment1/session.RData")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
dsSource$interval_revised <- sprintf("%04d", dsSource$interval)
dsSource$interval_revised <- paste(  substr(dsSource$interval_revised,1,2),
substr(dsSource$interval_revised,3,4),
sep = ":")
# dsSource$interval_revised <- as.factor(dsSource$interval_revised)
dsSource$interval_revised <- as.POSIXct(strptime(dsSource$interval_revised, format="%H:%M"))
dsStepsPerInterval <- aggregate(steps~interval_revised, data=dsSource,mean)
g <- ggplot(dsStepsPerInterval, aes(x=interval_revised, y=steps))+geom_line(group=1)
library(ggplot2)
dsSource$interval_revised <- sprintf("%04d", dsSource$interval)
dsSource$interval_revised <- paste(  substr(dsSource$interval_revised,1,2),
substr(dsSource$interval_revised,3,4),
sep = ":")
# dsSource$interval_revised <- as.factor(dsSource$interval_revised)
dsSource$interval_revised <- as.POSIXct(strptime(dsSource$interval_revised, format="%H:%M"))
dsStepsPerInterval <- aggregate(steps~interval_revised, data=dsSource,mean)
g <- ggplot(dsStepsPerInterval, aes(x=interval_revised, y=steps))+geom_line(group=1)
g
head(dsStepsPerInterval)
head(strptime(dsStepsPerInterval$interval_revised,"%H:%M")
)
library(scales)
install.packages("scales")
install.packages("scales")
library(scales)
dsSource$interval_revised <- sprintf("%04d", dsSource$interval)
dsSource$interval_revised <- paste(  substr(dsSource$interval_revised,1,2),
substr(dsSource$interval_revised,3,4),
sep = ":")
# dsSource$interval_revised <- as.factor(dsSource$interval_revised)
dsSource$interval_revised <- as.POSIXct(strptime(dsSource$interval_revised, format="%H:%M"))
dsStepsPerInterval <- aggregate(steps~interval_revised, data=dsSource,mean)
g <- ggplot(dsStepsPerInterval, aes(x=intervgal_revised, y=steps))+geom_line(group=1)+
scale_x_datetime(labels= date_format("%H:%M"))
library(ggplot2)
dsSource$interval_revised <- sprintf("%04d", dsSource$interval)
dsSource$interval_revised <- paste(  substr(dsSource$interval_revised,1,2),
substr(dsSource$interval_revised,3,4),
sep = ":")
# dsSource$interval_revised <- as.factor(dsSource$interval_revised)
dsSource$interval_revised <- as.POSIXct(strptime(dsSource$interval_revised, format="%H:%M"))
dsStepsPerInterval <- aggregate(steps~interval_revised, data=dsSource,mean)
g <- ggplot(dsStepsPerInterval, aes(x=intervgal_revised, y=steps))+geom_line(group=1)+
scale_x_datetime(labels= date_format("%H:%M"))
p
g
head(dsStepsPerInterval)
dsSource$interval_revised <- sprintf("%04d", dsSource$interval)
dsSource$interval_revised <- paste(  substr(dsSource$interval_revised,1,2),
substr(dsSource$interval_revised,3,4),
sep = ":")
# dsSource$interval_revised <- as.factor(dsSource$interval_revised)
dsSource$interval_revised <- as.POSIXct(strptime(dsSource$interval_revised, format="%H:%M"))
dsStepsPerInterval <- aggregate(steps~interval_revised, data=dsSource,mean)
g <- ggplot(dsStepsPerInterval, aes(x=interval_revised, y=steps))+geom_line(group=1)+
scale_x_datetime(labels= date_format("%H:%M"))
g
